/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKHCI_LIB_H
#define _MOCKHCI_LIB_H

#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>
#include <bluetooth/hci_lib.h>

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockhci_lib_Init(void);
void Mockhci_lib_Destroy(void);
void Mockhci_lib_Verify(void);


typedef int(*cmock_hci_lib_func_ptr1)(int dd, int dev_id, long arg);


#define hci_open_dev_ExpectAndReturn(dev_id, cmock_retval) hci_open_dev_CMockExpectAndReturn(__LINE__, dev_id, cmock_retval)
void hci_open_dev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, int cmock_to_return);
#define hci_close_dev_ExpectAndReturn(dd, cmock_retval) hci_close_dev_CMockExpectAndReturn(__LINE__, dd, cmock_retval)
void hci_close_dev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, int cmock_to_return);
#define hci_send_cmd_ExpectAndReturn(dd, ogf, ocf, plen, param, cmock_retval) hci_send_cmd_CMockExpectAndReturn(__LINE__, dd, ogf, ocf, plen, param, cmock_retval)
void hci_send_cmd_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t ogf, uint16_t ocf, uint8_t plen, void* param, int cmock_to_return);
#define hci_send_req_ExpectAndReturn(dd, req, timeout, cmock_retval) hci_send_req_CMockExpectAndReturn(__LINE__, dd, req, timeout, cmock_retval)
void hci_send_req_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, struct hci_request* req, int timeout, int cmock_to_return);
#define hci_create_connection_ExpectAndReturn(dd, bdaddr, ptype, clkoffset, rswitch, handle, to, cmock_retval) hci_create_connection_CMockExpectAndReturn(__LINE__, dd, bdaddr, ptype, clkoffset, rswitch, handle, to, cmock_retval)
void hci_create_connection_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const bdaddr_t* bdaddr, uint16_t ptype, uint16_t clkoffset, uint8_t rswitch, uint16_t* handle, int to, int cmock_to_return);
#define hci_disconnect_ExpectAndReturn(dd, handle, reason, to, cmock_retval) hci_disconnect_CMockExpectAndReturn(__LINE__, dd, handle, reason, to, cmock_retval)
void hci_disconnect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t reason, int to, int cmock_to_return);
#define hci_inquiry_ExpectAndReturn(dev_id, len, num_rsp, lap, ii, flags, cmock_retval) hci_inquiry_CMockExpectAndReturn(__LINE__, dev_id, len, num_rsp, lap, ii, flags, cmock_retval)
void hci_inquiry_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, int len, int num_rsp, const uint8_t* lap, inquiry_info** ii, long flags, int cmock_to_return);
#define hci_devinfo_ExpectAndReturn(dev_id, di, cmock_retval) hci_devinfo_CMockExpectAndReturn(__LINE__, dev_id, di, cmock_retval)
void hci_devinfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, struct hci_dev_info* di, int cmock_to_return);
#define hci_devba_ExpectAndReturn(dev_id, bdaddr, cmock_retval) hci_devba_CMockExpectAndReturn(__LINE__, dev_id, bdaddr, cmock_retval)
void hci_devba_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, bdaddr_t* bdaddr, int cmock_to_return);
#define hci_devid_ExpectAndReturn(str, cmock_retval) hci_devid_CMockExpectAndReturn(__LINE__, str, cmock_retval)
void hci_devid_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* str, int cmock_to_return);
#define hci_read_local_name_ExpectAndReturn(dd, len, name, to, cmock_retval) hci_read_local_name_CMockExpectAndReturn(__LINE__, dd, len, name, to, cmock_retval)
void hci_read_local_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, int len, char* name, int to, int cmock_to_return);
#define hci_write_local_name_ExpectAndReturn(dd, name, to, cmock_retval) hci_write_local_name_CMockExpectAndReturn(__LINE__, dd, name, to, cmock_retval)
void hci_write_local_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const char* name, int to, int cmock_to_return);
#define hci_read_remote_name_ExpectAndReturn(dd, bdaddr, len, name, to, cmock_retval) hci_read_remote_name_CMockExpectAndReturn(__LINE__, dd, bdaddr, len, name, to, cmock_retval)
void hci_read_remote_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const bdaddr_t* bdaddr, int len, char* name, int to, int cmock_to_return);
#define hci_read_remote_name_with_clock_offset_ExpectAndReturn(dd, bdaddr, pscan_rep_mode, clkoffset, len, name, to, cmock_retval) hci_read_remote_name_with_clock_offset_CMockExpectAndReturn(__LINE__, dd, bdaddr, pscan_rep_mode, clkoffset, len, name, to, cmock_retval)
void hci_read_remote_name_with_clock_offset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const bdaddr_t* bdaddr, uint8_t pscan_rep_mode, uint16_t clkoffset, int len, char* name, int to, int cmock_to_return);
#define hci_read_remote_name_cancel_ExpectAndReturn(dd, bdaddr, to, cmock_retval) hci_read_remote_name_cancel_CMockExpectAndReturn(__LINE__, dd, bdaddr, to, cmock_retval)
void hci_read_remote_name_cancel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const bdaddr_t* bdaddr, int to, int cmock_to_return);
#define hci_read_remote_version_ExpectAndReturn(dd, handle, ver, to, cmock_retval) hci_read_remote_version_CMockExpectAndReturn(__LINE__, dd, handle, ver, to, cmock_retval)
void hci_read_remote_version_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, struct hci_version* ver, int to, int cmock_to_return);
#define hci_read_remote_features_ExpectAndReturn(dd, handle, features, to, cmock_retval) hci_read_remote_features_CMockExpectAndReturn(__LINE__, dd, handle, features, to, cmock_retval)
void hci_read_remote_features_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t* features, int to, int cmock_to_return);
#define hci_read_remote_ext_features_ExpectAndReturn(dd, handle, page, max_page, features, to, cmock_retval) hci_read_remote_ext_features_CMockExpectAndReturn(__LINE__, dd, handle, page, max_page, features, to, cmock_retval)
void hci_read_remote_ext_features_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t page, uint8_t* max_page, uint8_t* features, int to, int cmock_to_return);
#define hci_read_clock_offset_ExpectAndReturn(dd, handle, clkoffset, to, cmock_retval) hci_read_clock_offset_CMockExpectAndReturn(__LINE__, dd, handle, clkoffset, to, cmock_retval)
void hci_read_clock_offset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t* clkoffset, int to, int cmock_to_return);
#define hci_read_local_version_ExpectAndReturn(dd, ver, to, cmock_retval) hci_read_local_version_CMockExpectAndReturn(__LINE__, dd, ver, to, cmock_retval)
void hci_read_local_version_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, struct hci_version* ver, int to, int cmock_to_return);
#define hci_read_local_commands_ExpectAndReturn(dd, commands, to, cmock_retval) hci_read_local_commands_CMockExpectAndReturn(__LINE__, dd, commands, to, cmock_retval)
void hci_read_local_commands_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* commands, int to, int cmock_to_return);
#define hci_read_local_features_ExpectAndReturn(dd, features, to, cmock_retval) hci_read_local_features_CMockExpectAndReturn(__LINE__, dd, features, to, cmock_retval)
void hci_read_local_features_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* features, int to, int cmock_to_return);
#define hci_read_local_ext_features_ExpectAndReturn(dd, page, max_page, features, to, cmock_retval) hci_read_local_ext_features_CMockExpectAndReturn(__LINE__, dd, page, max_page, features, to, cmock_retval)
void hci_read_local_ext_features_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t page, uint8_t* max_page, uint8_t* features, int to, int cmock_to_return);
#define hci_read_bd_addr_ExpectAndReturn(dd, bdaddr, to, cmock_retval) hci_read_bd_addr_CMockExpectAndReturn(__LINE__, dd, bdaddr, to, cmock_retval)
void hci_read_bd_addr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, bdaddr_t* bdaddr, int to, int cmock_to_return);
#define hci_read_class_of_dev_ExpectAndReturn(dd, cls, to, cmock_retval) hci_read_class_of_dev_CMockExpectAndReturn(__LINE__, dd, cls, to, cmock_retval)
void hci_read_class_of_dev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* cls, int to, int cmock_to_return);
#define hci_write_class_of_dev_ExpectAndReturn(dd, cls, to, cmock_retval) hci_write_class_of_dev_CMockExpectAndReturn(__LINE__, dd, cls, to, cmock_retval)
void hci_write_class_of_dev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint32_t cls, int to, int cmock_to_return);
#define hci_read_voice_setting_ExpectAndReturn(dd, vs, to, cmock_retval) hci_read_voice_setting_CMockExpectAndReturn(__LINE__, dd, vs, to, cmock_retval)
void hci_read_voice_setting_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t* vs, int to, int cmock_to_return);
#define hci_write_voice_setting_ExpectAndReturn(dd, vs, to, cmock_retval) hci_write_voice_setting_CMockExpectAndReturn(__LINE__, dd, vs, to, cmock_retval)
void hci_write_voice_setting_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t vs, int to, int cmock_to_return);
#define hci_read_current_iac_lap_ExpectAndReturn(dd, num_iac, lap, to, cmock_retval) hci_read_current_iac_lap_CMockExpectAndReturn(__LINE__, dd, num_iac, lap, to, cmock_retval)
void hci_read_current_iac_lap_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* num_iac, uint8_t* lap, int to, int cmock_to_return);
#define hci_write_current_iac_lap_ExpectAndReturn(dd, num_iac, lap, to, cmock_retval) hci_write_current_iac_lap_CMockExpectAndReturn(__LINE__, dd, num_iac, lap, to, cmock_retval)
void hci_write_current_iac_lap_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t num_iac, uint8_t* lap, int to, int cmock_to_return);
#define hci_read_stored_link_key_ExpectAndReturn(dd, bdaddr, all, to, cmock_retval) hci_read_stored_link_key_CMockExpectAndReturn(__LINE__, dd, bdaddr, all, to, cmock_retval)
void hci_read_stored_link_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, bdaddr_t* bdaddr, uint8_t all, int to, int cmock_to_return);
#define hci_write_stored_link_key_ExpectAndReturn(dd, bdaddr, key, to, cmock_retval) hci_write_stored_link_key_CMockExpectAndReturn(__LINE__, dd, bdaddr, key, to, cmock_retval)
void hci_write_stored_link_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, bdaddr_t* bdaddr, uint8_t* key, int to, int cmock_to_return);
#define hci_delete_stored_link_key_ExpectAndReturn(dd, bdaddr, all, to, cmock_retval) hci_delete_stored_link_key_CMockExpectAndReturn(__LINE__, dd, bdaddr, all, to, cmock_retval)
void hci_delete_stored_link_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, bdaddr_t* bdaddr, uint8_t all, int to, int cmock_to_return);
#define hci_authenticate_link_ExpectAndReturn(dd, handle, to, cmock_retval) hci_authenticate_link_CMockExpectAndReturn(__LINE__, dd, handle, to, cmock_retval)
void hci_authenticate_link_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, int to, int cmock_to_return);
#define hci_encrypt_link_ExpectAndReturn(dd, handle, encrypt, to, cmock_retval) hci_encrypt_link_CMockExpectAndReturn(__LINE__, dd, handle, encrypt, to, cmock_retval)
void hci_encrypt_link_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t encrypt, int to, int cmock_to_return);
#define hci_change_link_key_ExpectAndReturn(dd, handle, to, cmock_retval) hci_change_link_key_CMockExpectAndReturn(__LINE__, dd, handle, to, cmock_retval)
void hci_change_link_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, int to, int cmock_to_return);
#define hci_switch_role_ExpectAndReturn(dd, bdaddr, role, to, cmock_retval) hci_switch_role_CMockExpectAndReturn(__LINE__, dd, bdaddr, role, to, cmock_retval)
void hci_switch_role_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, bdaddr_t* bdaddr, uint8_t role, int to, int cmock_to_return);
#define hci_park_mode_ExpectAndReturn(dd, handle, max_interval, min_interval, to, cmock_retval) hci_park_mode_CMockExpectAndReturn(__LINE__, dd, handle, max_interval, min_interval, to, cmock_retval)
void hci_park_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t max_interval, uint16_t min_interval, int to, int cmock_to_return);
#define hci_exit_park_mode_ExpectAndReturn(dd, handle, to, cmock_retval) hci_exit_park_mode_CMockExpectAndReturn(__LINE__, dd, handle, to, cmock_retval)
void hci_exit_park_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, int to, int cmock_to_return);
#define hci_read_inquiry_scan_type_ExpectAndReturn(dd, type, to, cmock_retval) hci_read_inquiry_scan_type_CMockExpectAndReturn(__LINE__, dd, type, to, cmock_retval)
void hci_read_inquiry_scan_type_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* type, int to, int cmock_to_return);
#define hci_write_inquiry_scan_type_ExpectAndReturn(dd, type, to, cmock_retval) hci_write_inquiry_scan_type_CMockExpectAndReturn(__LINE__, dd, type, to, cmock_retval)
void hci_write_inquiry_scan_type_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t type, int to, int cmock_to_return);
#define hci_read_inquiry_mode_ExpectAndReturn(dd, mode, to, cmock_retval) hci_read_inquiry_mode_CMockExpectAndReturn(__LINE__, dd, mode, to, cmock_retval)
void hci_read_inquiry_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* mode, int to, int cmock_to_return);
#define hci_write_inquiry_mode_ExpectAndReturn(dd, mode, to, cmock_retval) hci_write_inquiry_mode_CMockExpectAndReturn(__LINE__, dd, mode, to, cmock_retval)
void hci_write_inquiry_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t mode, int to, int cmock_to_return);
#define hci_read_afh_mode_ExpectAndReturn(dd, mode, to, cmock_retval) hci_read_afh_mode_CMockExpectAndReturn(__LINE__, dd, mode, to, cmock_retval)
void hci_read_afh_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* mode, int to, int cmock_to_return);
#define hci_write_afh_mode_ExpectAndReturn(dd, mode, to, cmock_retval) hci_write_afh_mode_CMockExpectAndReturn(__LINE__, dd, mode, to, cmock_retval)
void hci_write_afh_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t mode, int to, int cmock_to_return);
#define hci_read_ext_inquiry_response_ExpectAndReturn(dd, fec, data, to, cmock_retval) hci_read_ext_inquiry_response_CMockExpectAndReturn(__LINE__, dd, fec, data, to, cmock_retval)
void hci_read_ext_inquiry_response_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* fec, uint8_t* data, int to, int cmock_to_return);
#define hci_write_ext_inquiry_response_ExpectAndReturn(dd, fec, data, to, cmock_retval) hci_write_ext_inquiry_response_CMockExpectAndReturn(__LINE__, dd, fec, data, to, cmock_retval)
void hci_write_ext_inquiry_response_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t fec, uint8_t* data, int to, int cmock_to_return);
#define hci_read_simple_pairing_mode_ExpectAndReturn(dd, mode, to, cmock_retval) hci_read_simple_pairing_mode_CMockExpectAndReturn(__LINE__, dd, mode, to, cmock_retval)
void hci_read_simple_pairing_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* mode, int to, int cmock_to_return);
#define hci_write_simple_pairing_mode_ExpectAndReturn(dd, mode, to, cmock_retval) hci_write_simple_pairing_mode_CMockExpectAndReturn(__LINE__, dd, mode, to, cmock_retval)
void hci_write_simple_pairing_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t mode, int to, int cmock_to_return);
#define hci_read_local_oob_data_ExpectAndReturn(dd, hash, randomizer, to, cmock_retval) hci_read_local_oob_data_CMockExpectAndReturn(__LINE__, dd, hash, randomizer, to, cmock_retval)
void hci_read_local_oob_data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* hash, uint8_t* randomizer, int to, int cmock_to_return);
#define hci_read_inq_response_tx_power_level_ExpectAndReturn(dd, level, to, cmock_retval) hci_read_inq_response_tx_power_level_CMockExpectAndReturn(__LINE__, dd, level, to, cmock_retval)
void hci_read_inq_response_tx_power_level_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, int8_t* level, int to, int cmock_to_return);
#define hci_read_inquiry_transmit_power_level_ExpectAndReturn(dd, level, to, cmock_retval) hci_read_inquiry_transmit_power_level_CMockExpectAndReturn(__LINE__, dd, level, to, cmock_retval)
void hci_read_inquiry_transmit_power_level_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, int8_t* level, int to, int cmock_to_return);
#define hci_write_inquiry_transmit_power_level_ExpectAndReturn(dd, level, to, cmock_retval) hci_write_inquiry_transmit_power_level_CMockExpectAndReturn(__LINE__, dd, level, to, cmock_retval)
void hci_write_inquiry_transmit_power_level_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, int8_t level, int to, int cmock_to_return);
#define hci_read_transmit_power_level_ExpectAndReturn(dd, handle, type, level, to, cmock_retval) hci_read_transmit_power_level_CMockExpectAndReturn(__LINE__, dd, handle, type, level, to, cmock_retval)
void hci_read_transmit_power_level_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t type, int8_t* level, int to, int cmock_to_return);
#define hci_read_link_policy_ExpectAndReturn(dd, handle, policy, to, cmock_retval) hci_read_link_policy_CMockExpectAndReturn(__LINE__, dd, handle, policy, to, cmock_retval)
void hci_read_link_policy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t* policy, int to, int cmock_to_return);
#define hci_write_link_policy_ExpectAndReturn(dd, handle, policy, to, cmock_retval) hci_write_link_policy_CMockExpectAndReturn(__LINE__, dd, handle, policy, to, cmock_retval)
void hci_write_link_policy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t policy, int to, int cmock_to_return);
#define hci_read_link_supervision_timeout_ExpectAndReturn(dd, handle, timeout, to, cmock_retval) hci_read_link_supervision_timeout_CMockExpectAndReturn(__LINE__, dd, handle, timeout, to, cmock_retval)
void hci_read_link_supervision_timeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t* timeout, int to, int cmock_to_return);
#define hci_write_link_supervision_timeout_ExpectAndReturn(dd, handle, timeout, to, cmock_retval) hci_write_link_supervision_timeout_CMockExpectAndReturn(__LINE__, dd, handle, timeout, to, cmock_retval)
void hci_write_link_supervision_timeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t timeout, int to, int cmock_to_return);
#define hci_set_afh_classification_ExpectAndReturn(dd, map, to, cmock_retval) hci_set_afh_classification_CMockExpectAndReturn(__LINE__, dd, map, to, cmock_retval)
void hci_set_afh_classification_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* map, int to, int cmock_to_return);
#define hci_read_link_quality_ExpectAndReturn(dd, handle, link_quality, to, cmock_retval) hci_read_link_quality_CMockExpectAndReturn(__LINE__, dd, handle, link_quality, to, cmock_retval)
void hci_read_link_quality_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t* link_quality, int to, int cmock_to_return);
#define hci_read_rssi_ExpectAndReturn(dd, handle, rssi, to, cmock_retval) hci_read_rssi_CMockExpectAndReturn(__LINE__, dd, handle, rssi, to, cmock_retval)
void hci_read_rssi_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, int8_t* rssi, int to, int cmock_to_return);
#define hci_read_afh_map_ExpectAndReturn(dd, handle, mode, map, to, cmock_retval) hci_read_afh_map_CMockExpectAndReturn(__LINE__, dd, handle, mode, map, to, cmock_retval)
void hci_read_afh_map_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t* mode, uint8_t* map, int to, int cmock_to_return);
#define hci_read_clock_ExpectAndReturn(dd, handle, which, clock, accuracy, to, cmock_retval) hci_read_clock_CMockExpectAndReturn(__LINE__, dd, handle, which, clock, accuracy, to, cmock_retval)
void hci_read_clock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint8_t which, uint32_t* clock, uint16_t* accuracy, int to, int cmock_to_return);
#define hci_le_set_scan_enable_ExpectAndReturn(dev_id, enable, filter_dup, to, cmock_retval) hci_le_set_scan_enable_CMockExpectAndReturn(__LINE__, dev_id, enable, filter_dup, to, cmock_retval)
void hci_le_set_scan_enable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, uint8_t enable, uint8_t filter_dup, int to, int cmock_to_return);
#define hci_le_set_scan_parameters_ExpectAndReturn(dev_id, type, interval, window, own_type, filter, to, cmock_retval) hci_le_set_scan_parameters_CMockExpectAndReturn(__LINE__, dev_id, type, interval, window, own_type, filter, to, cmock_retval)
void hci_le_set_scan_parameters_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, uint8_t type, uint16_t interval, uint16_t window, uint8_t own_type, uint8_t filter, int to, int cmock_to_return);
#define hci_le_set_advertise_enable_ExpectAndReturn(dev_id, enable, to, cmock_retval) hci_le_set_advertise_enable_CMockExpectAndReturn(__LINE__, dev_id, enable, to, cmock_retval)
void hci_le_set_advertise_enable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dev_id, uint8_t enable, int to, int cmock_to_return);
#define hci_le_create_conn_ExpectAndReturn(dd, interval, window, initiator_filter, peer_bdaddr_type, peer_bdaddr, own_bdaddr_type, min_interval, max_interval, latency, supervision_timeout, min_ce_length, max_ce_length, handle, to, cmock_retval) hci_le_create_conn_CMockExpectAndReturn(__LINE__, dd, interval, window, initiator_filter, peer_bdaddr_type, peer_bdaddr, own_bdaddr_type, min_interval, max_interval, latency, supervision_timeout, min_ce_length, max_ce_length, handle, to, cmock_retval)
void hci_le_create_conn_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t interval, uint16_t window, uint8_t initiator_filter, uint8_t peer_bdaddr_type, bdaddr_t peer_bdaddr, uint8_t own_bdaddr_type, uint16_t min_interval, uint16_t max_interval, uint16_t latency, uint16_t supervision_timeout, uint16_t min_ce_length, uint16_t max_ce_length, uint16_t* handle, int to, int cmock_to_return);
#define hci_le_conn_update_ExpectAndReturn(dd, handle, min_interval, max_interval, latency, supervision_timeout, to, cmock_retval) hci_le_conn_update_CMockExpectAndReturn(__LINE__, dd, handle, min_interval, max_interval, latency, supervision_timeout, to, cmock_retval)
void hci_le_conn_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint16_t handle, uint16_t min_interval, uint16_t max_interval, uint16_t latency, uint16_t supervision_timeout, int to, int cmock_to_return);
#define hci_le_add_white_list_ExpectAndReturn(dd, bdaddr, type, to, cmock_retval) hci_le_add_white_list_CMockExpectAndReturn(__LINE__, dd, bdaddr, type, to, cmock_retval)
void hci_le_add_white_list_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const bdaddr_t* bdaddr, uint8_t type, int to, int cmock_to_return);
#define hci_le_rm_white_list_ExpectAndReturn(dd, bdaddr, type, to, cmock_retval) hci_le_rm_white_list_CMockExpectAndReturn(__LINE__, dd, bdaddr, type, to, cmock_retval)
void hci_le_rm_white_list_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, const bdaddr_t* bdaddr, uint8_t type, int to, int cmock_to_return);
#define hci_le_read_white_list_size_ExpectAndReturn(dd, size, to, cmock_retval) hci_le_read_white_list_size_CMockExpectAndReturn(__LINE__, dd, size, to, cmock_retval)
void hci_le_read_white_list_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, uint8_t* size, int to, int cmock_to_return);
#define hci_le_clear_white_list_ExpectAndReturn(dd, to, cmock_retval) hci_le_clear_white_list_CMockExpectAndReturn(__LINE__, dd, to, cmock_retval)
void hci_le_clear_white_list_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dd, int to, int cmock_to_return);
#define hci_for_each_dev_ExpectAndReturn(flag, func, arg, cmock_retval) hci_for_each_dev_CMockExpectAndReturn(__LINE__, flag, func, arg, cmock_retval)
void hci_for_each_dev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int flag, cmock_hci_lib_func_ptr1 func, long arg, int cmock_to_return);
#define hci_get_route_ExpectAndReturn(bdaddr, cmock_retval) hci_get_route_CMockExpectAndReturn(__LINE__, bdaddr, cmock_retval)
void hci_get_route_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bdaddr_t* bdaddr, int cmock_to_return);
#define hci_bustostr_ExpectAndReturn(bus, cmock_retval) hci_bustostr_CMockExpectAndReturn(__LINE__, bus, cmock_retval)
void hci_bustostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int bus, char* cmock_to_return);
#define hci_typetostr_ExpectAndReturn(type, cmock_retval) hci_typetostr_CMockExpectAndReturn(__LINE__, type, cmock_retval)
void hci_typetostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int type, char* cmock_to_return);
#define hci_dtypetostr_ExpectAndReturn(type, cmock_retval) hci_dtypetostr_CMockExpectAndReturn(__LINE__, type, cmock_retval)
void hci_dtypetostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int type, char* cmock_to_return);
#define hci_dflagstostr_ExpectAndReturn(flags, cmock_retval) hci_dflagstostr_CMockExpectAndReturn(__LINE__, flags, cmock_retval)
void hci_dflagstostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t flags, char* cmock_to_return);
#define hci_ptypetostr_ExpectAndReturn(ptype, cmock_retval) hci_ptypetostr_CMockExpectAndReturn(__LINE__, ptype, cmock_retval)
void hci_ptypetostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ptype, char* cmock_to_return);
#define hci_strtoptype_ExpectAndReturn(str, val, cmock_retval) hci_strtoptype_CMockExpectAndReturn(__LINE__, str, val, cmock_retval)
void hci_strtoptype_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* val, int cmock_to_return);
#define hci_scoptypetostr_ExpectAndReturn(ptype, cmock_retval) hci_scoptypetostr_CMockExpectAndReturn(__LINE__, ptype, cmock_retval)
void hci_scoptypetostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ptype, char* cmock_to_return);
#define hci_strtoscoptype_ExpectAndReturn(str, val, cmock_retval) hci_strtoscoptype_CMockExpectAndReturn(__LINE__, str, val, cmock_retval)
void hci_strtoscoptype_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* val, int cmock_to_return);
#define hci_lptostr_ExpectAndReturn(ptype, cmock_retval) hci_lptostr_CMockExpectAndReturn(__LINE__, ptype, cmock_retval)
void hci_lptostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ptype, char* cmock_to_return);
#define hci_strtolp_ExpectAndReturn(str, val, cmock_retval) hci_strtolp_CMockExpectAndReturn(__LINE__, str, val, cmock_retval)
void hci_strtolp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* val, int cmock_to_return);
#define hci_lmtostr_ExpectAndReturn(ptype, cmock_retval) hci_lmtostr_CMockExpectAndReturn(__LINE__, ptype, cmock_retval)
void hci_lmtostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ptype, char* cmock_to_return);
#define hci_strtolm_ExpectAndReturn(str, val, cmock_retval) hci_strtolm_CMockExpectAndReturn(__LINE__, str, val, cmock_retval)
void hci_strtolm_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* val, int cmock_to_return);
#define hci_cmdtostr_ExpectAndReturn(cmd, cmock_retval) hci_cmdtostr_CMockExpectAndReturn(__LINE__, cmd, cmock_retval)
void hci_cmdtostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmd, char* cmock_to_return);
#define hci_commandstostr_ExpectAndReturn(commands, pref, width, cmock_retval) hci_commandstostr_CMockExpectAndReturn(__LINE__, commands, pref, width, cmock_retval)
void hci_commandstostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* commands, char* pref, int width, char* cmock_to_return);
#define hci_vertostr_ExpectAndReturn(ver, cmock_retval) hci_vertostr_CMockExpectAndReturn(__LINE__, ver, cmock_retval)
void hci_vertostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ver, char* cmock_to_return);
#define hci_strtover_ExpectAndReturn(str, ver, cmock_retval) hci_strtover_CMockExpectAndReturn(__LINE__, str, ver, cmock_retval)
void hci_strtover_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* ver, int cmock_to_return);
#define lmp_vertostr_ExpectAndReturn(ver, cmock_retval) lmp_vertostr_CMockExpectAndReturn(__LINE__, ver, cmock_retval)
void lmp_vertostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ver, char* cmock_to_return);
#define lmp_strtover_ExpectAndReturn(str, ver, cmock_retval) lmp_strtover_CMockExpectAndReturn(__LINE__, str, ver, cmock_retval)
void lmp_strtover_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* ver, int cmock_to_return);
#define pal_vertostr_ExpectAndReturn(ver, cmock_retval) pal_vertostr_CMockExpectAndReturn(__LINE__, ver, cmock_retval)
void pal_vertostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int ver, char* cmock_to_return);
#define pal_strtover_ExpectAndReturn(str, ver, cmock_retval) pal_strtover_CMockExpectAndReturn(__LINE__, str, ver, cmock_retval)
void pal_strtover_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, unsigned int* ver, int cmock_to_return);
#define lmp_featurestostr_ExpectAndReturn(features, pref, width, cmock_retval) lmp_featurestostr_CMockExpectAndReturn(__LINE__, features, pref, width, cmock_retval)
void lmp_featurestostr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* features, char* pref, int width, char* cmock_to_return);

#endif
